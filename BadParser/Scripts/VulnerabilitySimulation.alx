#'components';

crash = macro(@(vulnNumber) {
    (@{
        b =  0xdead0000 + vulnNumber |> Convert.ToUInt32 |> BitConverter.GetBytes;
        ptr = 0x10 |> Marshal.AllocHGlobal;
        Marshal.Copy(b, 0, ptr, b.Length);
        0x52 @Marshal.WriteByte(ptr |> Marshal.ReadIntPtr);
    })()
});

createVulnerabilitySimulator = @{
    v = { };
    currentVulnNumber = 0;
    nextVulnNumber = @() ++currentVulnNumber;
    _v = macro(@(name, condition) {
        id(num, name) = nextVulnNumber();
        v.name = @{
            isSeq($_) ? $_ @aq.select(v.name) : condition ? crash(id(num, name)) : _;
        };
    });

    _v(checkName, $_.Name != null && $_.Name.Length > 0x100);
    _v(checkPositionX, $_.Position != null && $_.Position.X > Int64.MaxValue / 2);
    _v(checkPositionY, $_.Position != null && $_.Position.Y < 0);
    _v(checkBufferSize, $_.Buffer != null && $_.Buffer.Length > 0x200);
    _v(checkBufferNull, $_.Buffer == null);
    _n = nextVulnNumber();
    v.checkWidgetCount = @{ if (isSeq($_) && $_.Length > 0x100) crash(_n) };
    _v(checkVariant, $_.Variant.GetType().IsArray);

    ret v;
};

runAllChecks = @(w) {
    #'reflection';

    print('Creating vulnerability simulator');
    vs = createVulnerabilitySimulator();
    (vs |> reflection.members)->@{
        print("Calling simulator method '{0}'", $_);
        vs.{$_}(w);
    };

    print('Done');
}; 


head('Bad Parser 1.2');
print();
init();
args = Environment.GetCommandLineArgs();
argOffset = (args[0] |> Path.GetFileName).ToLower() == 'aphid.exe' ? 1 : 0;
fileOffset = 1 + argOffset;

switch (args.Length - argOffset) {
    1: {
        print('Usage: BadParser [Input file]');
        Environment.Exit(1);
    }
    2: if (!File.Exists(args[fileOffset])) {
        print("Could not find input file '{0}'", args[fileOffset]);
        Environment.Exit(2);
    }
    default: print('Default case for {0}', args.Length + argOffset);
}

file = args[fileOffset];
print("Loading test file '{0}'", file);
ext = file |> Path.GetExtension;

widgets;

switch (ext.ToLower()) {
    ".json": {
        print('Deserializing JSON');
        widgets = file |> readWidget.json
    }
    default: {
        print("Cannot deserialize file with unknown extension '{0}'", ext);
        Environment.Exit(3);
    }
}

print('{0} widgets loaded\r\n', widgets.Length);
widgets for print('{0}', $_);
widgets |> runAllChecks;