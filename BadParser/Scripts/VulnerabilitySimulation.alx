#'scripts\\components';

crash = macro(@(vulnNumber) {
    (@{
        var n = 0xdead0000 + vulnNumber;
        
        printSuccess(
            'Triggering crash for vulnerability ~Cyan~0x{0}~R~',
            Convert.ToString(n, 16));

        var b = n |> Convert.ToUInt32 |> BitConverter.GetBytes;
        var ptr = 0x10 |> Marshal.AllocHGlobal;
        Marshal.Copy(b, 0, ptr, b.Length);
        0x52 @Marshal.WriteByte(ptr |> Marshal.ReadIntPtr);
    })()
});

var createVulnerabilitySimulator = @{
    var v = { };
    var currentVulnNumber = 0;
    var nextVulnNumber = @() ++currentVulnNumber;

    _v = macro(@(name, condition) {
        var id(num, name) = nextVulnNumber();
        v.name = @{
            isCollection($_) ? $_ @aq.select(v.name) : condition ? crash(id(num, name)) : _;
        };
    });

    _v(checkName, $_.Name != null && $_.Name.Length > 0x100);
    _v(checkPositionX, $_.Position != null && $_.Position.X > Int64.MaxValue / 2);
    _v(checkPositionY, $_.Position != null && $_.Position.Y < 0);
    _v(checkBufferSize, $_.Buffer != null && $_.Buffer.Length > 0x200);
    _v(checkBufferNull, $_.Buffer == null);
    var _n = nextVulnNumber();
    v.checkWidgetCount = @{ if (isCollection($_) && $_.Length > 0x100) crash(_n) };
    _v(checkVariant, !$_.Variant.GetType().IsSealed);

    ret v;
};

var runAllChecks = @(w) {
    print('Creating vulnerability simulator');
    var vs = createVulnerabilitySimulator();
    
    vs |> keys ->@{
        print("Calling simulator method '{0}'", $_);
        vs.{$_}(w);
    };

    print('Done');
}; 