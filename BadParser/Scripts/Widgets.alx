load System.Web.Extensions;
load System.Xml;
using System;
using System.Xml.Serialization;
using System.Web.Script.Serialization;

class of long WidgetVector { X, Y };
class Widget { string Name, WidgetVector Position, byte set Buffer, Variant };

var dumpVector = @() String.Format('X={0}, Y={1}', $_.X, $_.Y);

var dumpWidget = @() String.Format(
    '{0}, {{ {1} }}, Buffer Size={2}, Variant={3}',
    [
        $_.Name,
        $_.Position != null ? $_.Position |> dumpVector : '[Position null]',
        $_.Buffer != null ? $_.Buffer.Length : '[Buffer null]',
        $_.Variant != null ? $_.Variant : '[Variant null]'
    ]);

var createWidget = @{
    var w = new Widget();
    w.Name = 'Test Widget';
    w.Position = new WidgetVector();
    w.Position.X = 52;
    w.Position.Y = 30;
    w.Buffer = 0x10 |> createBuffer;
    w.Variant = 'hello, world';

    ret w;
};

_widgetType = macro(@{ (new Widget()).GetType().MakeArrayType()});

var readWidget = {
    json: @() (new JavaScriptSerializer()).Deserialize($_ |> File.ReadAllText, _widgetType()),
    xml: @{
        using (var s = $_ |> File.OpenRead) {
            var attrs = new XmlAttributes();
            attrs.XmlElements.Add(new XmlElementAttribute("Int", int));
            attrs.XmlElements.Add(new XmlElementAttribute("String", string));
            attrs.XmlElements.Add(new XmlElementAttribute("Widget", Widget));
            var overrides = new XmlAttributeOverrides();
            overrides.Add(Widget, "Variant", attrs);
            var xmlSerializer = new XmlSerializer(_widgetType(), overrides);
            var x = xmlSerializer.Deserialize(s);
            
            ret x;
        }
    },
}