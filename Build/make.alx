#'std';
using System.Diagnostics;

head('Bad Barser Build Script');
printQuery('Starting build process');

_dbg = macro(@(stmt) {
    if (this.{'$debugger'} defined) {
        stmt();
    }
});

var fail = @(exitCode, message) {
    printCriticalError(message);

    _dbg(@{
        Console.WriteLine('Press enter to continue...');
        while (Console.ReadKey(true).Key != ConsoleKey.Enter) { }
    });
    
    exitCode | exit;
};

var getAphidDir = @io.join(io.app.dir());
_dbg(@() getAphidDir = @io.join('c:\\tools\\aphid'));

var getDir = @io.join(this.{'$script'} | io.up | io.up | io.full);
var outDir = getDir('bin');

if (outDir | io.not.dir) {
    printQuery('Creating ~Cyan~{0}~R~', outDir);
    Directory.CreateDirectory(outDir);
    printSuccess('Directory created');
}

var requireFile = @(s) {
    if (!File.Exists(s)) {
        fail(0xbad01, 'Could not find ~Cyan~{0}~R~' :: s);
    }
};

printInfo('Building to ~Cyan~{0}~R~', outDir);
var mainScript = getDir('BadParser', 'BadParser.alx');
requireFile(mainScript);

var makeExe = getAphidDir('Tools', 'MakeExe.alx');
requireFile(makeExe);
printSuccess('Make exe script found at ~Cyan~{0}~R~', makeExe);

['32', '64']->@(bitness) {
    var aphidExe = getAphidDir('Aphid{0}.exe' :: bitness);
    requireFile(aphidExe);

    printQuery('Making {0}-bit exe from ~Cyan~{1}~R~', bitness, mainScript);
    // var outExe = getDir('bin', 'BadParser{0}.exe' :: bitness);
    var outExe = outDir @io.end('BadParser{0}.exe' :: bitness);

    var si = new ProcessStartInfo(
        aphidExe,
        '"{0}" -medusa "{1}" "{2}"' :: [ makeExe, mainScript, outExe ]);

    si.WorkingDirectory = mainScript | io.up | io.cd;

    printInfo(
        'Launching MakeExe with command: ~Cyan~{0} {1}~R~',
        si.FileName,
        si.Arguments);

    si.UseShellExecute = false;
    var p = Process.Start(si);
    p.WaitForExit();

    if (p.ExitCode != 0) {
        fail(
            0xbad02,
            'MakeExe.alx failed with exit code ~Cyan~{0}~R~' :: p.ExitCode);
    }

    // [ outExe, 'pdb' @Path.ChangeExtension(outExe) ]->@{
    //     var outSrc = getDir('Build', $_);
    //     var outDst = getDir('bin', $_);
    //     requireFile(outSrc);

    //     printInfo('Moving ~Cyan~{0}~R~ to ~Cyan~{0}~R~', outSrc, outDst);
    //     File.Copy(outSrc, outDst, true);
    //     File.Delete(outSrc);
    // };
};

var copySets = @(sets)
    sets->@{
        var src = $_[0];
        var dst = $_[1];
        printInfo('Copying ~Cyan~{0}~R~ to ~Cyan~{1}~R~', src, dst);
        var dir = Path.GetDirectoryName(dst);

        if (!Directory.Exists(dir)) {
            printInfo('Creating directory ~Cyan~{0}~R~', dir);
            Directory.CreateDirectory(dir);
        }

        File.Copy(src, dst, true);
    };

[
    'test.json',
    'test.xml',
    'test_0xdead0001.json',
    'test_0xdead0001.xml',
    'test_0xdead0002.json',
    'test_0xdead0002.xml',
    'test_0xdead0003.json',
    'test_0xdead0003.xml',
    'test_0xdead0004.json',
    'test_0xdead0004.xml',
    'test_0xdead0005.json',
    'test_0xdead0005.xml',
    'test_0xdead0006.json',
    'test_0xdead0006.xml',
    'test_0xdead0007.json',
    'test_0xdead0007.xml',
]
->(@(f) [ getDir('BadParser', f), getDir('bin', f) ])
|> copySets;

File.Copy(getDir('readme.MD'), getDir('bin', 'readme.MD'), true);
//File.Copy(getDir('BadParser', 'BadParser.alx'), getDir('bin', 'scripts', 'BadParser.alx'), true);

// var corFlagsExe = "c:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6 Tools\\CorFlags.exe";

// if (File.Exists(corFlagsExe)) {
//     var dst = getDir('bin', 'BadParserx86.exe');
//     printInfo('Creating x86 exe ~Cyan~{0}~R~', dst);
//     File.Copy(getDir('bin', 'BadParser.exe'), dst, true);
//     printQuery('Running CorFlags');
//     var si = new ProcessStartInfo(corFlagsExe, '"{0}" /32BIT+' :: [ dst ]);
//     si.UseShellExecute = false;
//     var p = Process.Start(si);
//     p.WaitForExit();

//     if (p.ExitCode != 0) {
//         fail(
//             0xbad03,
//             'CorFlags.exe failed with exit code ~Cyan~{0}~R~' :: p.ExitCode);
//     }

//     printSuccess('Successfully creating x86 binary');
// } else {
//     printError(
//         'Could not find corflags executable at ~Yellow~{0}~R~, unable to create explicit x86 binary.',
//         corFlagsExe);
// }

var downloadSource = @(url, dst) {
    using System.Net;

    printInfo('Downloading ~Cyan~{0}~R~ to ~Cyan~{1}~R~', url, dst);

    using (var c = new WebClient()) {
        c.DownloadFile(url, dst);
    }

    printSuccess('Download complete');
};

var srcDir = getDir('bin', 'src');

if (!Directory.Exists(srcDir)) {
    printInfo('Creating ~Cyan~{0}~R~', srcDir);
    Directory.CreateDirectory(srcDir);
}

downloadSource(
    'https://github.com/John-Leitch/Aphid/archive/master.zip',
    getDir('bin', 'src', 'Aphid.zip'));

downloadSource(
    'https://github.com/AutoSecTools/BadParser/archive/master.zip',
    getDir('bin', 'src', 'BadParser.zip'));

printSuccess('done');