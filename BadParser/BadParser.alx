{
    title: 'BadParser',
    version: '1.6.042218',
    company: 'AutoSec Tools LLC',
    copyright: '© AutoSec Tools LLC 2018',
};

#'Scripts\\VulnerabilitySimulation';

var p = this.{'$block'}[0] |> evalNode;
head('{0} {1}' :: [ p.title, p.version ]);
print();

var args = Environment.GetCommandLineArgs();
var argOffset = (args[0] |> Path.GetFileNameWithoutExtension).ToLower() == 'aphid' ? 1 : 0;
var fileOffset = 1 + argOffset;

switch (args.Length - argOffset) {
    1: {
        print('Usage: BadParser [Input file]');
        Environment.Exit(1);
    }
    2: if (!File.Exists(args[fileOffset])) {
        print("Could not find input file '{0}'", args[fileOffset]);
        Environment.Exit(2);
    }
    default: print('Default case for {0}', args.Length + argOffset);
}

var file = args[fileOffset];
print("Loading test file '{0}'", file);
var ext = file |> Path.GetExtension;

var read;

switch (ext.ToLower()) {
    ".json": read = readWidget.json;
    ".xml": read = readWidget.xml;
    default: {
        print("Cannot deserialize file with unknown extension '{0}'", ext);
        Environment.Exit(3);
    }
}

var widgets = file |> read;
ext.Substring(1).ToUpper() |> @print('Deserializing {0}');
print('{0} widgets loaded\r\n', widgets.Length);
widgets for $_ |> dumpWidget @print('{0}');
print();
widgets |> runAllChecks;